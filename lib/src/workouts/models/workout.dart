import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:scheduler_flutter/src/workouts/models/endurance.dart';
import 'package:scheduler_flutter/src/workouts/models/strength.dart';

enum WorkoutType { strength, endurance }

class Workout extends Object with Strength, Endurance {
  // unique autogenerated by database or provider
  String _id;

  String name;
  WorkoutType _type;

  Workout({this.name, WorkoutType type}) : _type = type ?? WorkoutType.strength;

  // these methods might fit better in the providers
  Workout.fromSnapshot(DocumentSnapshot snapshot) {
    _id = snapshot.documentID;

    name = snapshot.data['name'];
    _type = WorkoutType.values
        .firstWhere((e) => e.toString() == snapshot.data['type']);

    isStrength
        ? strengthFromSnapshot(snapshot)
        : enduranceFromSnapshot(snapshot);
  }

  Map<String, dynamic> toSnapshot() {
    var snapshot = <String, dynamic>{
      'name': name,
      'type': _type.toString(),
    };

    snapshot.addAll(isStrength ? strengthToSnapshot() : enduranceToSnapshot());

    return snapshot;
  }

  bool get isStrength => _type == WorkoutType.strength;
  bool get isEndurance => _type == WorkoutType.endurance;

  String get id => _id;

  String get type =>
      _type.toString().substring(_type.toString().indexOf('.') + 1);

  void setType(WorkoutType type) {
    _type = type;
  }

  bool isUpdate() {
    return _id != null;
  }

  @override
  String toString() {
    return '$name ($type) -> ${isStrength ? strengthToString() : enduranceToString()}';
  }
}
